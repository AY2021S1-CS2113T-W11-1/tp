@startuml

participant ":AddSlotCommand" as AddSlotCommand
participant ":Timetable" as Timetable
participant ":Module" as Module
participant ":Module" as ModuleNew
participant ":Slot" as Slot
participant ":Slot" as SlotNew
participant ":Bookmark" as BookmarkSlot
participant ":Bookmark" as BookmarkModule
participant ":Ui" as Ui




[-> AddSlotCommand : execute(bookmarks, timetable, ui)
activate AddSlotCommand

AddSlotCommand -> Timetable : moduleExists(moduleCode)
activate Timetable

Timetable --> AddSlotCommand
deactivate Timetable

alt module exists
    AddSlotCommand -> Timetable : getModule(moduleCode)
    activate Timetable

    Timetable -> Module : isModule(moduleCode)
    activate Module

    Module --> Timetable : true
    deactivate Module

    Timetable --> AddSlotCommand : module
    deactivate Timetable

else module does not exist
    AddSlotCommand -> Timetable : addModule(moduleCode)
    activate Timetable

    Timetable -> ModuleNew ** : create(moduleCode)
    activate ModuleNew

    ModuleNew --> Timetable
    deactivate ModuleNew

    Timetable --> AddSlotCommand : module
    deactivate Timetable
end

opt commands is not null
    loop command : commands
        AddSlotCommand -> AddSlotCommand : createSlotAndBookmark(module, command)
        activate AddSlotCommand

        AddSlotCommand -> AddSlotCommand : create(command, module)
        activate AddSlotCommand

        AddSlotCommand -> AddSlotCommand : isAddModuleBookmark(slotAndBookmark)
        activate AddSlotCommand

        AddSlotCommand --> AddSlotCommand : boolean
        deactivate AddSlotCommand

        alt add module bookmark
            AddSlotCommand -> AddSlotCommand : addBookmarkToModule(module, slotAndBookmark)
            activate AddSlotCommand

            AddSlotCommand -> BookmarkModule ** : create(description, url)
            activate BookmarkModule

            BookmarkModule --> AddSlotCommand
            deactivate BookmarkModule

            AddSlotCommand -> Module : addBookmark(bookmark)
            activate Module

            Module --> AddSlotCommand
            deactivate Module

            AddSlotCommand --> AddSlotCommand : message
            deactivate AddSlotCommand
        else add slot

            note right of AddSlotCommand : throw exception if startTime or endTime is invalid

            AddSlotCommand -> Module : slotExists(lesson, day, startTime, endTime)
            activate Module

            Module --> AddSlotCommand : boolean
            deactivate Module

            alt slot exists
                AddSlotCommand -> Module : getSlot(lesson, day, startTime, endTime)
                activate Module

                Module -> Slot : match(lesson, day, startTime, endTime)
                activate Slot

                Slot --> Module : true
                deactivate Slot

                Module --> AddSlotCommand : slot
                deactivate Module
            else slot does not exist
                AddSlotCommand -> Module : createSlotNew(lesson, day, startTime, endTime)
                activate Module

                Module -> SlotNew ** : create(lesson, day, startTime, endTime)
                activate SlotNew

                SlotNew --> Module
                deactivate SlotNew

                Module --> AddSlotCommand : slot
                deactivate Module

                AddSlotCommand -> Module : addSlot(slot)
                activate Module

                Module --> AddSlotCommand
                deactivate Module
            end

            AddSlotCommand -> AddSlotCommand : checkForAndAddBookmarkToSlot(slotAndBookmark, lesson, slot)
            activate AddSlotCommand

            alt valid url
                AddSlotCommand -> AddSlotCommand : createBookmark(url, lesson, slot)
                activate AddSlotCommand

                opt invalid url
                    note right of AddSlotCommand : throw exception
                end

                AddSlotCommand -> BookmarkSlot ** : create(lesson, url)
                activate BookmarkSlot

                BookmarkSlot --> AddSlotCommand
                deactivate BookmarkSlot

                AddSlotCommand -> Slot : addBookmark(bookmark)
                activate Slot

                Slot --> AddSlotCommand
                deactivate Slot

                AddSlotCommand --> AddSlotCommand
                deactivate AddSlotCommand
            else invalid url
                note right of AddSlotCommand : throw exception
            end

            AddSlotCommand --> AddSlotCommand : message
            deactivate AddSlotCommand
        end


        AddSlotCommand --> AddSlotCommand : message
        deactivate AddSlotCommand

        AddSlotCommand --> AddSlotCommand : message
        deactivate AddSlotCommand
    end
end


AddSlotCommand -> Ui : print(message)
activate Ui

Ui --> AddSlotCommand
deactivate Ui

AddSlotCommand -->[
deactivate AddSlotCommand

@enduml